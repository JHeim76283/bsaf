#org.jdesktop.application.inject.resources.JLabelInjector.properties
#Properties file for JUnit test Class TestJLabelInjector

jLabel.disabledIcon=black1x1.png
#VK_A as hex number
jLabel.displayedMnemonic=0x41
jLabel.displayedMnemonicIndex=6
#SwingConstants.CENTER=0,LEFT=2, RIGHT = 4,  LEADING=10, TRAILING=11
jLabel.horizontalAlignment=4
jLabel.horizontalTextPosition=0
jLabel.icon= black1x1.png
#default is 4 pixels
jLabel.iconTextGap=16
#jLabel.labelFor = ?? Component. Should be able to specify a Component name and have it linked
jLabel.text=Applejack
#jLabel.setUI = ?? again, could we pass a L&F name and have the injector apply the appropriate UI delegate?
#SwingConstants.CENTER=0, TOP=1, BOTTOM=3
jLabel.verticalAlignment=3
jLabel.verticalTextPosition=1

#JComponent properties

#jLabel.actionMap= ??
#alignment floats between 0 and 1
jLabel.alignmentX=0.17
jLabel.alignmentY=0.82345
jLabel.autoscrolls=true
jLabel.background= 127,127,127
#jLabel.border= ?? framework has an EmptyBorder converter, but that's it. Should we expand the options available?
#jLabel.componentPopupMenu = ??
#DebugGraphics.LOG_OPTION=1, FLASH_OPTION=2, BUFFERED_OPTION=4, NONE_OPTION=-1: 0 = no changes
jLabel.debugGraphicsOptions =  2
#jLabel.defaultLocale = ?? STATIC we should be able to create a Local by a string name
jLabel.doubleBuffered= false

jLabel.enabled=false
#jLabel.focusTraversalKeys
jLabel.font=Arial-ITALIC-13
jLabel.foreground=50,60,70
jLabel.inheritsPopupMenu=true
#jLabel.inputMap=??
#jLabel.inputVerifier = ??
#sizes are Dimensions
jLabel.maximumSize=400,400
jLabel.minimumSize=200,200
jLabel.preferredSize=300,300
jLabel.opaque=false
jLabel.requestFocusEnabled=false
jLabel.toolTipText=This is the JLabel tooltip text string
#jLabel.transferHandler = ??
#jLabel.setUI #overriden by AbstractButton
jLabel.verifyInputWhenFocusTarget=false
jLabel.visible=true

#Container properties
#jLabel.componentZOrder = ?? takes a component and number
jLabel.focusCycleRoot=true
#jLabel.focusTaversalKeys=??
#jLabel.focusTaversalPolicy
jLabel.focusTraversalPolicyProvider=true
#jLabel.font overridden
#jLabel.layout #LayoutManager name?


#Component properties
#jLabel.background overrridden
#bounds are a Rectangle or 4 ints
jLabel.bounds=5,10,15,20
#jLabel.componentOrientation
#jLabel.cursor = ?? We might want to implement Cursors, where the String is the cursor name
#jLabel.dropTarget= ??
#jLabel.enabled overriden
jLabel.focusable=false
#jLabel.focusTraversalKeys overridden
jLabel.focusTraversalKeysEnabled=true
#jLabel.font overridden
#jLabel.foreground overridden
jLabel.ignoreRepaint=true
#jLabel.locale ? Name of Locale?
#bounds conflicts with location setting
#jLabel.location=30,40
#jLabel.minimumSize overridden
#jLabel.maximumSize overridden
#jLabel.preferredSize overriden
#jLabel.size this conflicts with bounds

#this property will conflict with the manually set name that is used to match a component with its properties in this file
jLabel.name=modified JLabel name
#jLabel.visible overridden

#this would conflict with the explicitly set displayedMnemonicIndex and mnemonic properties
jLabel2.text = E&xit
#bounds conflicts with location and size
#location takes either a Point or two ints
jLabel2.location=50,60
#size method takes a Dimension or two ints
jLabel2.size=20,20
jLabel2.icon=${null}






