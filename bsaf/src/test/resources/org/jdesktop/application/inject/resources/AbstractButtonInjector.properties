#org.jdesktop.application.inject.resources.AbstractButtonInjector.properties
#Properties file for JUnit test Class TestAbstractButtonInjector

button.defaultCapable=false
#button.setAction= ? #in my Command-centered API, we should be able to indicate an Action via a property
button.actionCommand=This is the ActionCommand string
button.borderPainted=false
button.contentAreaFilled=false
button.disabledIcon=black1x1.png
button.disabledSelectedIcon=black1x1.png
button.enabled=false
button.focusPainted=false
button.hideActionText = true
#SwingConstants.CENTER=0,LEFT=2, RIGHT = 4,  LEADING=10, TRAILING=11
button.horizontalAlignment=4
button.horizontalTextPosition=0
button.icon= black1x1.png
#default is 4 pixels
button.iconTextGap=16
#button.Layout #LayoutManager - do we want a StringToLayoutManager converter??
#takes Insets
button.margin=1,2,3,4
#button.model= ?? hmm, this would be interesting to pass a name of a model and have the injector construct the object?
#default = 0
button.multiClickThreshhold=100
button.pressedIcon= black1x1.png
button.rolloverEnabled=true
button.rolloverIcon=black1x1.png
button.rolloverSelectedIcon=black1x1.png
button.selected=true
button.text=Applejack
button.displayedMnemonicIndex=6
#VK_A as hex number
button.mnemonic=0x41

#button.setUI = ?? again, could we pass a L&F name and have the injector apply the appropriate UI delegate?
#SwingConstants.CENTER=0, TOP=1, BOTTOM=3
button.verticalAlignment=3
button.verticalTextPosition=1

#JComponent properties

#button.actionMap= ??
#alignment floats between 0 and 1
button.alignmentX=0.17
button.alignmentY=0.82345
button.autoscrolls=true
button.background= 127,127,127
#button.border= ?? framework has an EmptyBorder converter, but that's it. Should we expand the options available?
#button.componentPopupMenu = ??
#DebugGraphics.LOG_OPTION=1, FLASH_OPTION=2, BUFFERED_OPTION=4, NONE_OPTION=-1: 0 = no changes
button.debugGraphicsOptions =  2
#button.defaultLocale = ?? we should be able to create a Local by a string name
button.doubleBuffered= false

#button.enabled - overridden in AbstractButton
#button.focusTraversalKeys
button.font=Arial-PLAIN-12
button.foreground=50,60,70
button.inheritsPopupMenu=true
#button.inputMap=??
#button.inputVerifier = ??
#sizes are Dimensions
button.maximumSize=400,400
button.minimumSize=200,200
button.preferredSize=300,300
button.opaque=false
button.requestFocusEnabled=false
button.toolTipText=This is the tooltip text string
#button.transferHandler = ??
#button.setUI #overriden by AbstractButton
button.verifyInputWhenFocusTarget=false
button.visible=true

#Container properties
#button.componentZOrder = ?? takes a component and number
button.focusCycleRoot=true
#button.focusTaversalKeys=??
#button.focusTaversalPolicy
button.focusTraversalPolicyProvider=true
#button.font overridden
#button.layout overriden


#Component properties
#button.background overrridden
#bounds are a Rectangle or 4 ints
button.bounds=5,10,15,20
#button.componentOrientation
#button.cursor = ?? We might want to implement Cursors, where the String is the cursor name
#button.dropTarget= ??
#button.enabled overriden
button.focusable=false
#button.focusTraversalKeys overridden
button.focusTraversalKeysEnabled=true
#button.font overridden
#button.foreground overridden
button.ignoreRepaint=true
#button.locale overridden

#button.minimumSize overridden
#button.maximumSize overridden
#this property will conflict with the manually set name that is used to match a component with its properties in this file
button.name=foo bar name String
#button.visible overridden

#this would conflict with the explicitly set displayedMnemonicIndex and mnemonic properties
button2.text = E&xit
#bounds conflicts with location and size
#location takes either a Point or two ints
button2.location=50,60
#size method takes a Dimension or two ints
button2.size=20,20
button2.icon=${null}






